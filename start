# /shop command
# Assuming bot is your Pyrogram client
@bot.on_message(filters.command("shop"))
async def open_shop(client, message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    game = games.get(chat_id)
    if not game:
        return await message.reply("❌ No active game in this chat.")

    for player in game["players"]:
        if player.get("id") == user_id:
            coins = player.get("coins", 0)
            xp = player.get("xp", 0)
            level = player.get("level", 1)

            text = (
                f"🛍 <b>Welcome to the Shop!</b>\n"
                f"💰 Coins: <b>{coins}</b>\n"
                f"⭐ XP: <b>{xp}</b>\n"
                f"⬆️ Level: <b>{level}</b>\n\n"
                f"Available Items:\n"
                f"🛡 Shield - <b>3</b> Coins\n"
                f"📜 Scroll - <b>5</b> Coins\n"
                f"⚖ Extra Vote - <b>4</b> Coins"
            )

            buttons = [
                [
                    InlineKeyboardButton("🛡 Buy Shield", callback_data=f"buy:shield:{chat_id}"),
                    InlineKeyboardButton("📜 Buy Scroll", callback_data=f"buy:scroll:{chat_id}")
                ],
                [
                    InlineKeyboardButton("⚖ Buy Extra Vote", callback_data=f"buy:vote:{chat_id}")
                ]
            ]

            return await message.reply(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(buttons)
            )

    await message.reply("❌ You are not part of the game.")


@bot.on_callback_query()
async def handle_callbacks(client, callback_query: CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id

    if data.startswith("inventory:"):
        parts = data.split(":")
        if len(parts) >= 2:
            _, game_chat_id = parts[0], parts[1]
        else:
            return await callback_query.answer("Invalid data format.", show_alert=True)

        game = games.get(int(game_chat_id))
        if not game:
            return await callback_query.answer("⚠️ Game not found.", show_alert=True)

        for player in game["players"]:
            if player.get("id") == user_id:
                inventory = player.get("inventory", {})
                text = (
                    "🎒 <b>Your Inventory</b>\n\n"
                    f"🛡 Shield: <b>{inventory.get('shield', 0)}</b>\n"
                    f"📜 Scroll: <b>{inventory.get('scroll', 0)}</b>\n"
                    f"⚖ Extra Vote: <b>{inventory.get('vote', 0)}</b>"
                )
                return await callback_query.message.reply(text, parse_mode="HTML")

        return await callback_query.answer("❌ You are not part of the game.", show_alert=True)

    elif data.startswith("buy:"):
        try:
            _, item, game_chat_id = data.split(":")
            game_chat_id = int(game_chat_id)
        except ValueError:
            return await callback_query.answer("⚠️ Invalid data.", show_alert=True)

        game = games.get(game_chat_id)
        if not game:
            return await callback_query.answer("⚠️ Game not found.", show_alert=True)

        item_prices = {
            "shield": 3,
            "scroll": 5,
            "vote": 4
        }

        if item not in item_prices:
            return await callback_query.answer("❌ Invalid item.", show_alert=True)

        for player in game["players"]:
            if player["id"] == user_id:
                if player.get("coins", 0) < item_prices[item]:
                    return await callback_query.answer(
                        f"💸 Not enough coins (Need {item_prices[item]})", show_alert=True
                    )

                player["coins"] -= item_prices[item]
                inventory = player.setdefault("inventory", {})
                inventory[item] = inventory.get(item, 0) + 1

                return await callback_query.answer(f"✅ Bought {item.capitalize()}!", show_alert=True)

        return await callback_query.answer("❌ You are not part of this game.", show_alert=True)
